async def get_stocks():
    while True:
        pTime = datetime.strftime(datetime.utcnow(), "%H:%M")
        cTime = pTime     
        while (cTime == pTime): 
            #print(cTime)
            fTime = datetime.utcnow()
            cDate = datetime.date(fTime)
            cTime = datetime.strftime(fTime, "%H:%M")
            await asyncio.sleep(1)
        try:
            file = open("prices.csv", "x")
            #print(file.read())
            file.write("Date, Time, TSB, TCB, SYS, LAG, IOU, GRN, THS, YAZ, TCT, CNC, MSG, TMI, TCP, IIL, FHG, SYM, LSC, PRN, EWM, TCM, ELT, HRG, TGP, WSU, IST, BAG, EVL, MCS, WLT, TCC\n")
            file.close()
        except:
            #print("Exists")
            r = requests.get("https://api.torn.com/torn/?selections=stocks&key=" + os.getenv('API'))
            print(str(cDate) + " " + str(cTime) + " " + str(r))
            prices = ""
            try:
                for x in r.json()["stocks"]:
                    prices = prices + ", " + str(r.json()["stocks"][x]["current_price"])
            except:
                prices = "Error: " + str(r)
                #print(r.json())
                    
            file = open("prices.csv", "a")
            file.write(str(cDate) + ", "  + str(cTime) + prices + "\n")
            await bot_actions.send_message(client, prices)
            file.close()


#REGISTER NEW NOTIFICATION----------------------------------------
# async def register(client, message):
#     try:
#         #Style name, id, stock, above_below, value, note, current, trigger
#         id = message.author.id
#         name = message.author.display_name
#         parsed_msg = message.content.split(' ', 4)
#         parsed_msg[1] = parsed_msg[1].upper()
#         try:
#             val = float(parsed_msg[3])
#         except ValueError:
#             val = 0
      
#         if parsed_msg[1] in constants.acronym_list:
#             if len(parsed_msg) > 3 and (parsed_msg[2] == "above" or parsed_msg[2] == "below") and val > 0 :
#                 line = str(backend.increment_counter()) + ","
#                 line = line + name + "," + str(id) + ","
#                 line = line + parsed_msg[1] + ","
#                 line = line + parsed_msg[2] + ","
#                 line = line + parsed_msg[3] + ","
#                 if len(parsed_msg) > 4:
#                     note = parsed_msg[4]
#                 else:
#                     note = ""
#                 line = line + note + ","
#                 line = line + ","
#                 line = line + "True" + "\n"
#                 file = open("notify.csv", "a")
#                 file.write(line)
#                 file.close
#                 await message.reply("Your notification has been saved.")
#             else:
#                 await message.reply("Incorrect format use: !notify [stock] [above/below] [value] [note (optional, no spaces)]")
#         else:
#             await message.reply("That stock does not exist, please use the acronym found in !stocks")
#     except:
#         await functions.error_handler(client, message.content, "register")


#LIST NOTIFICATIONS----------------------------------------  
# async def list_notifications(client, message):
#     #Style name, id, stock, above_below, value, note, time_notified, triggered
#     pd.set_option('display.max_rows', None)
#     pd.set_option('display.max_columns', None)
#     pd.set_option('display.width', None)
#     pd.set_option('display.max_colwidth', None)

#     auth_id = numpy.int64(message.author.id)
#     file = open("notify.csv", "r")
#     df = pd.read_csv(file)
#     file.close()
#     df = df[df['id'] == auth_id]
#     df = df[['notif_id','name','stock', 'above_below', 'value', 'note']]
#     #print(tabulate(df, tablefmt="grid"))
    
#     await message.reply("```\n " + df.to_string(index=False) + " \n```")

#REMOVE NOTIFICATIONS----------------------------------------
# async def remove(client, message):
#     parsed_msg = message.content.split(' ')
#     auth_id = numpy.int64(message.author.id)
#     file = open("notify.csv", "r")
#     df = pd.read_csv(file)
#     file.close()
#     if parsed_msg[1].isnumeric():
#         drop_id = numpy.int64(parsed_msg[1])
#         to_drop = df[(df['id'] == auth_id) & (df['notif_id'] == drop_id)].index
#         await message.reply("Attempting to drop row " + str(drop_id) + "..")
#     elif parsed_msg[1].upper() == "ALL":
#         to_drop = df[(df['id'] == auth_id)].index
#         await message.reply("Attempting to delete notifications..")
#     elif parsed_msg[1].upper() in constants.acronym_list:
#         to_drop = df[(df['id'] == auth_id) & (df['stock'] == parsed_msg[1].upper())].index
#         await message.reply("Attempting to drop all " + parsed_msg[1].upper() + " rows..")
#     df = df.drop(to_drop)
#     #print(len(to_drop))
#     #print(df.to_string())
#     df.to_csv("notify.csv", index=False)
#     await message.reply(str(len(to_drop)) + " records dropped.")
    


# async def error_handler(client, message, function):
#     fTime = datetime.utcnow()
#     line = str(fTime) + ' ' + client.user + " Error in " + function + " with: " + message.content + "\n" + str(traceback.print_exc()) + "\n"
#     print(line)
#     file = open("error.txt", "a")
#     file.write(line)
#     file.close
#     send_message(client, "226030188733923328", line)

#HELP TEXT---------------------------------------------------------
# async def help_text(client, message):
#     try:
#         parsed = message.content.split(' ')
#         parsed.pop(0)
#         sub_path = "/help_docs"
#         if len(parsed) > 0:
#             for sub in parsed:
#                 sub_path = sub_path + "/" + str(sub.lower())
#         if os.path.isdir(sys.path[0]+sub_path):
#             sub_path = sub_path + "/main"
#         try:
#             f = open(sys.path[0]+sub_path, "r")
#             text = f.read()
#             f.close()
#         except:
#             text = "That help file does not exist."
#         await message.reply(sub_path + "\n" + text)
#     except:
#          await functions.error_handler(client, message.content, "help_text")